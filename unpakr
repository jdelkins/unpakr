#!/usr/bin/env python3
# Script:   Auto-Extract (Python edition)
# Author:  Joel Elkins <joel@elkins.com>
# Original Author:   Mark Stahler <markstahler@gmail.com>
# Version:  2.001
# License:  BSD
#
# Description:  Unpakr is a script designed to be run as a cron job (or
#   scheduled task).  Its purpose is to recursively scan a directory for
#   archive files, extract them, and upload them to a cloud service using
#   rclone, and then finally delete the unpacked files. Each of these steps is
#   optional.  The script is designed to be run at regular intervals and will
#   create a file named .unpakr.unrared in each directory that contains an
#   archive extracted by the script. These files are used to tell the script,
#   on subsequent scans, that the archive in the marked folder has previously
#   been extracted and uploaded. The script will create a lock file in the
#   target directory to prevent contention from multiple concurrent
#   invocations.
#
# Limitations:  Unpakr has been written to support one multiple archive groups per
#   directory scanned (Example a movie in its own directory with files .rar,
#   .r01, .r02, .nfo, etc). Embedded archives may be problematic if used with
#   the -c option, since the embedded archives, along with their possibly
#   extracted contents, will be wiped out at the cleaning stage. The setup is
#   inteded to work well with movies and other files that are packed and
#   downloaded in individual directories.
#
#   Auto-Extract will overwrite previously extracted files if given the -u flag
#   and it does not find a .unpakr-unpacked file present in the archive
#   directory.
#
#   The script also works fine with .zip files.
#
# Requirements:
#   -Python 3.5 or newer
#   -unrar in your path [Freeware command line version available from http://www.rarlab.com/]
#   -unzip in your path
#
# BUGS:
#   -Cannot tell if an archive has been fully downloaded
#   -Note above remark about embedded archives
#
# TODO:
#   -Proper logging (ie. debug, info messages)
#   -Check for available disk space and estimate required
#   -Support for other archive types
#

import logging
import os
import os.path
import sys
from pathlib import Path
import subprocess
import shutil

file_ext_unpacked = '.unpakr-unpacked'
file_name_lock = '.unpakr-locked'
if sys.platform == 'win32':
    exe_unrar = 'UnRAR.exe'
    exe_unzip = 'unzip.exe'
    exe_rclone = 'rclone.exe'
else:
    exe_unrar = 'unrar'
    exe_unzip = 'unzip'
    exe_rclone = 'rclone'
file_ext_supported = {
        '.rar': [exe_unrar, 'x', '-ai', '-idq', '-y', 'ARCHIVE', 'DESTINATION'],
        '.r01': [exe_unrar, 'x', '-ai', '-idq', '-y', 'ARCHIVE', 'DESTINATION'],
        '.zip': [exe_unzip, '-q', '-o', 'ARCHIVE', '-d', 'DESTINATION'],
}

rclone_exclude=['*.rar', '*.r[[:digit:]][[:digit:]]', '*.zip', '*'+file_ext_unpacked, file_name_lock]

class Unpacker(object):
    def __init__(self, download_dir):
        self.download_dir = download_dir

    def clean_all(self):
        """Remove all unpacked files, which were stored in files matching *.unpakr-unpacked"""
        logging.info('Cleaning extracted files in %s...', self.download_dir)
        for dirname, _, filenames in os.walk(self.download_dir):
            for f in filenames:
                if f.endswith(file_ext_unpacked):
                    logging.debug('Cleaning contents of %s/%s', dirname, f)
                    with open(os.path.join(dirname, f)) as up:
                        for fl in up:
                            path = os.path.join(dirname, fl.strip())
                            if os.path.isdir(path) and not os.path.islink(path):
                                logging.debug('... %s', path)
                                shutil.rmtree(path)
                            elif os.path.exists(path):
                                logging.debug('... %s', path)
                                os.remove(path)

    def traverse_directories(self):
        """Scan the download directory and its subdirectories"""
        # Search download directory and all subdirectories
        num_errors = 0
        logging.info('Walking %s...', self.download_dir)
        for dirname, _, _ in os.walk(self.download_dir):
            num_errors += self.scan_for_archives(dirname)
        if num_errors > 0:
            logging.error('Done walking, encountered %d errors', num_errors)
        else:
            logging.info('Done walking with no errors')
        return num_errors

    def findall(self, path):
        files = []
        path = str(path)
        for dirname, dirnames, filenames in os.walk(path):
            files += [os.path.relpath(os.path.join(dirname, d), path) for d in dirnames]
            files += [os.path.relpath(os.path.join(dirname, f), path) for f in filenames]
        return sorted(files)

    def scan_for_archives(self, dirname):
        """Check for rar files in each directory"""
        num_errors = 0
        target = Path(dirname)
        for filepath in target.iterdir():
            arc, ext = os.path.splitext(str(filepath))
            if filepath.is_file() and ext in file_ext_supported:
                file_done = target / (arc + file_ext_unpacked)
                if file_done.exists():
                    logging.info('Skipping previously done archive %s', target / filepath)
                    continue
                # Start extracting file
                files_base = self.findall(target)
                if self.unpack(target, filepath, ext) > 0:
                    num_errors += 1
                else:
                    files_unpacked = sorted(list(set(self.findall(target)) - set(files_base)))
                    logging.debug('Unpacked %d files', len(files_unpacked))
                    with file_done.open('w') as f:
                        for u in files_unpacked:
                            f.write(u + '\n')
        return num_errors

    def make_cmd(self, ext, archive, destination):
        cmd = file_ext_supported[ext].copy()
        cmd[cmd.index('ARCHIVE')] = archive
        cmd[cmd.index('DESTINATION')] = destination
        return cmd

    def unpack(self, target, archive_name, ext):
        """Extract a rar archive"""
        # Create command line arguments for rar extractions
        cmd_args = self.make_cmd(ext, str(target / archive_name), str(target))
        logging.info('Extracting %s...', (target / archive_name))
        logging.debug('Executing: %s', ' '.join(cmd_args))
        rc = subprocess.run(cmd_args, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
        try:
            rc.check_returncode()
        except subprocess.CalledProcessError as e:
            logging.error('unpack command returned error: %d', e.returncode)
            logging.error('unpack command stderr: %s', e.stderr)
            return 1
        return 0


def lock(target_dir):
    """Creates a hidden file so the script cannot run multiple times"""
    os.close(os.open(
        os.path.join(target_dir, file_name_lock),
        os.O_CREAT | os.O_EXCL,
        0o644
    ))
    logging.debug('%s/%s lock file created', target_dir, file_name_lock)

def unlock(target_dir):
    """Deletes the hidden lock file"""
    os.unlink(os.path.join(target_dir, file_name_lock))
    logging.debug('%s/%s lock file deleted', target_dir, file_name_lock)

def parse_options():
    from argparse import ArgumentParser, ArgumentTypeError

    def a_dir(s):
        if os.path.isdir(s):
            return s
        raise ArgumentTypeError('{} is not a directory'.format(s))
    parser = ArgumentParser(description='Unpack archive files, rclone sync a directory, and clean up the unpacked files')
    parser.add_argument('target_dir', metavar='DIR', type=a_dir, help='Directory to operate on')
    parser.add_argument('--unpack', '-u', action='store_true', help='Unpack archives')
    parser.add_argument('--rclone', '-r', metavar='REMOTE:TARGET', type=str, help='Rclone the base directory to REMOTE:TARGET')
    parser.add_argument('--clean', '-c', action='store_true', help='Clean (remove) extracted files after cloning')
    parser.add_argument('--logfile', '-l', metavar='LOGFILE', type=str, default='unpakr.log', help='Log file')
    parser.add_argument('--loglevel', '-L', metavar='LEVEL', choices=['error','warning','info','debug'], default='info', help='Log level LEVEL = [error|warning|info|debug]')
    return parser.parse_args()

def do_rclone(target_dir, dest):
    """Clone the target directory to a cloud storage service with rclone"""
    logging.info('Starting rclone process: %s -> %s', target_dir, dest)
    excludes = '\n'.join(rclone_exclude).encode()
    cmd = [ exe_rclone,
            '--exclude-from',
            '/dev/stdin',
            'copy',
            target_dir,
            dest ]
    logging.debug('executing: %s', ' '.join(cmd))
    rc = subprocess.run(cmd, input=excludes, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
    try:
        rc.check_returncode()
    except subprocess.CalledProcessError as e:
        logging.error('rclone returned %d', e.returncode)
        logging.error('rclone stderr: %s', e.stderr)
        return 1
    logging.info('Rclone completed successfully')
    return 0

if __name__ == '__main__':
    opts = parse_options()
    if opts.logfile:
        logging.basicConfig(
            filename=opts.logfile,
            level=opts.loglevel.upper(),
            format='%(asctime)s %(module)s %(levelname)s %(message)s'
        )
    else:
        logging.basicConfig(
            level=opts.loglevel.upper(),
            format='%(asctime)s %(module)s %(levelname)s %(message)s'
        )

    try:
        # Obtain the global lock
        lock(opts.target_dir)
        import atexit
        atexit.register(unlock, opts.target_dir)
    except:
        logging.error('Unable to obtain global lock')
        exit(1)

    rc = 0
    if opts.unpack:
        unpacker = Unpacker(os.path.abspath(opts.target_dir))
        rc = unpacker.traverse_directories()

    if opts.rclone:
        if rc > 0:
            logging.info('Syncing despite the Unpack errors')
        if do_rclone(os.path.abspath(opts.target_dir), opts.rclone) > 0:
            logging.error('Aborting execution due to rclone errors')
            exit(1)

    if opts.clean:
        unpacker = Unpacker(os.path.abspath(opts.target_dir))
        unpacker.clean_all()


